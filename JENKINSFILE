pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent { label 'windows' }
            steps {
                bat 'whoami && hostname && echo %WORKSPACE%'
                echo 'Me voy a traer el codigo'
                // Obtener cÃ³digo del repo
                git 'https://github.com/DaniDiLara/helloworld.git'
                bat 'dir'
                echo WORKSPACE
                stash name: 'fuente', includes: '**'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    agent { label 'python' }
                    steps {
                        bat 'whoami && hostname && echo %WORKSPACE%'
                        unstash 'fuente'
                        bat '''
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                        junit 'result-unit.xml'
                    }
                }

                stage('Rest') {
                    agent { label 'java' }
                    steps {
                        bat 'whoami && hostname && echo $WORKSPACE'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        unstash 'fuente'
                        bat '''
                            set FLASK_APP=app\\api.py
                            set FLASK_ENV=development
                            start flask run
                            start java -jar C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\Repositorios\\helloworld\\test\\wiremock\\wiremock-jre8-standalone-2.28.0.jar --port 9090 --root-dir C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\Repositorios\\helloworld\\test\\wiremock
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-rest.xml test\\rest
                        '''
                        junit 'result-rest.xml'
                        }
                    }
                }
            }
        }

        stage('Static') {
            agent { label 'python' }
            steps {
                unstash 'fuente'
                bat '''
                    flake8 app > flake8-result.txt || exit 0
                '''
                recordIssues tools: [flake8()],
                    qualityGates: [
                            [threshold: 8, type: 'TOTAL', unstable: true],
                            [threshold: 10, type: 'TOTAL', failure: true]
                    ]
            }
        }

        stage('Security Test') {
            agent { label 'python' }
            steps {
                unstash 'fuente'
                 bat 'bandit -r app -f xml -o bandit.out || exit 0'
                     recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                        [threshold: 2, type: 'TOTAL', unstable: true],
                        [threshold: 4, type: 'TOTAL', unstable: false]
                     ]
            }
        }

        stage('Coverage') {
            agent { label 'python' }
            steps {
                unstash 'fuente'
                bat '''
                    set PYTHONPATH=.
                    coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                    coverage report -m
                    coverage xml
                '''
                recordCoverage(
                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                    sourceCodeRetention: 'EVERY_BUILD',
                    failOnError: false,
                    qualityGates: [
                [metric: 'LINE', unstableThreshold: 85.0, failureThreshold: 85.0, threshold: 95.0],
                [metric: 'BRANCH', unstableThreshold: 80.0, failureThreshold: 80.0, threshold: 90.0]
                    ]
                )
            }
        }

        stage('Performance') {
            agent { label 'java' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                unstash 'fuente'
                bat '''
                    SET FLASK_APP=app\\api.py
                    SET FLASK_ENV=development
                    start "" /B flask run
                    ping 192.168.1.1 -n 3 >nul
                    call  "C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\Programas\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter.bat" -n -t "C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\test-plan.jmx" -l test\\results.jtl
                '''
                step([
                    $class: 'PerformancePublisher',
                    sourceDataFiles: 'test/results.jtl'
                    ])
                }
            }
        }
    }
}