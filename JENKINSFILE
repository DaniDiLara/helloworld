pipeline {
    agent any

    parameters {
        // Parámetro para seleccionar la rama a clonar, por defecto es 'develop'
        string(name: 'BRANCH', defaultValue: 'develop')
    }

    stages {
        stage('Get Code') {
            steps {
                echo 'Me voy a traer el código desde la rama seleccionada'
                // Obtener el código del repo con la rama seleccionada
                git branch: "${params.BRANCH}", url: 'https://github.com/DaniDiLara/helloworld.git'
                bat 'dir'
                echo "Workspace: ${WORKSPACE}"
            }
        }

        stage('Build') {
            steps {
                echo 'NO HAY QUE COMPILAR NADA. ESTO ES PYTHON'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    steps {
                        bat '''
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                    }
                }

                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set FLASK_APP=app\\api.py
                                set FLASK_ENV=development
                                start flask run
                                start java -jar C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\Repositorios\\helloworld\\test\\wiremock\\wiremock-jre8-standalone-2.28.0.jar --port 9090 --root-dir C:\\Users\\DaniL\\OneDrive\\Escritorio\\Curso\\Repositorios\\helloworld\\test\\wiremock
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test\\rest
                            '''
                        }
                    }
                }
            }
        }

        stage('Results') {
            steps {
                junit 'result*.xml'
            }
        }
    }
}